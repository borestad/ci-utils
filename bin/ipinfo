#!/usr/bin/env bash

# https://ip-api.com/docs/api:json
# https://ip-api.com/docs/api:batch

set -o errexit
set -e

DIR=/opt/ipinfo
BKT_CACHE_DIR=/opt/ipinfo/.cache

IP=''
if [ -n "$1" ]; then
    IP="$1"
else
    IP=$(cat)
fi

function get-subdir() {
  dirname $(echo "$1" | sed 's/\./\//g')
}

SUBDIR=$(get-subdir "$IP")
IPPATH="$DIR/json/$SUBDIR/$IP.json"

# If file already exists, just return it
test -f $IPPATH && {
  [[ -z "$IPINFO_SILENT" ]] && cat $IPPATH;
  exit 0;
}

mkdir -p $DIR || { exit 1; }
mkdir -p /tmp/ipinfo || { exit 1; }

echo "uncached: $IP" >> $DIR/ipinfo.log;
TEMPDIR=$(mktemp -d --tmpdir=/tmp/ipinfo)

# TODO: Compare dates

cd $TEMPDIR

bkt --cache-dir=$BKT_CACHE_DIR --ttl=30d --discard-failures -- \
  bash -c """
    curl --max-time 5 --compressed -sfL "http://ip-api.com/json/$IP?fields=accuracy,as,asname,city,continent,continentCode,country,countryCode,hosting,isp,lat,lon,message,mobile,org,proxy,query,region,status,timezone,zip" \
    -D headers.txt \
    -o result.tmp

    test -f result.tmp || exit 1
    jq --sort-keys '. + {date: (now | todateiso8601)}' < result.tmp
  """ >| result.json

test -f headers.txt || { CACHED=1; }
test -f result.json || { sleep 1; exit 1; }

jq '.status' < result.json | grep -q success || \
  { jq '.message' < result.json | grep -q "reserved range"; } || \
  { jq . result.json; exit 1; }

if [ -z $CACHED ]; then
  # The returned HTTP header X-Rl contains the number of requests remaining in the current rate limit window.
  # X-Ttl contains the seconds until the limit is reset.
  XRL=$(grep 'X-Rl' headers.txt | grep -Eo '[0-9]+')
  XTTL=$(grep 'X-Ttl' headers.txt | grep -Eo '[0-9]+')

  if [ "$XRL" -eq "0" ]; then
    echo "RateLimit: sleep $XTTL seconds" >> $DIR/ipinfo.log
    sleep $(echo "$XTTL + 1.999" | bc -l)
  fi
fi

mkdir -p "$DIR/json/$SUBDIR" && cd "$_"
mv "$TEMPDIR/result.json" "$IP.json"
jq . "$IP.json"

sleep 2

rm -rf $TEMPDIR
